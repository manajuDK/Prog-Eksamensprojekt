@page "/gamepage"
@using Blazor_Poker_Nights


<h3>GamePage</h3>
@if (activePlayer is not null && !roundEnded) // Game is ongoing
{
	<UserGameInfo player=activePlayer @ref="activeComp"></UserGameInfo> // active player
	<p>Current bet this round: @roundBet DKK; Current gold in pot: @pot DKK</p>
	// Game options (call/check, fold, raise)
	<div class="options">
		<button @onclick="check">@(activePlayer.currentBet == roundBet ? "Check" : "Call")</button>
		<div>
			<button @onclick="raise">Raise</button> <input type="text" placeholder="bet amount..." @bind="betAmount" />
		</div>
		@if (!(turn == 1 && activePlayer.name == Shared.GlobalInfo.userList[0].name))
		{
			<button @onclick="fold">Fold</button>
		}
		
	</div>
	// cards on the table
	if (turn > 1 && turn < 5) {
		<h4>Table cards for round @turn:</h4>
		<div id="userInfo">
			<svg width="1000"
			height="130"
			xmlns="http://www.w3.org/2000/svg"
			xmlns:xlink="http://www.w3.org/1999/xlink">
				@for (int z = 0; z < (turn != 1 ? turn + 1 : 0); z++)
				{
					<use href="@table[z].getName()" x="@(z*190)" y="10"
					transform="rotate(0)scale(0.5)" />
				}

			</svg>
		</div>
	}

	<p> Turn order goes counterclockwise (the next player is the rightmost player)</p>
	// other players information (turn order, their money, their current bet)
	@foreach (User player in players)
	{
		if (!player.active)
		{
			<div class="scores">
				<UserGameInfo player=player></UserGameInfo>
			</div>
			
		}
		
	}


}
else if (roundEnded && winner is not null) // a winner have been found
{
	<h3>Winner: @winner.name</h3>
	<h3>Table Cards:</h3>
	<div id="userInfo">
		<svg width="1200"
			 height="130"
			 xmlns="http://www.w3.org/2000/svg"
			 xmlns:xlink="http://www.w3.org/1999/xlink">
			@for (int z = 0; z < 5; z++)
			{
				<use href="@table[z].getName()" x="@(z*190)" y="10"
					 transform="rotate(0)scale(0.5)" />
			}

		</svg>
	</div>
	//hands:
	<h4> @winner.name had the hand: @handlist[winner.bestHand[0]-1]</h4>
	<UserInfo player=@winner></UserInfo>
	// cards:
	<div id="userInfo">
		<svg width="300"
			 height="130"
			 xmlns="http://www.w3.org/2000/svg"
			 xmlns:xlink="http://www.w3.org/1999/xlink">
			<use href="@winner.hand[0].getName()" x="0" y="0"
				 transform="rotate(0)scale(0.5)" />
			<use href="@winner.hand[1].getName()" x="100" y="0"
				 transform="rotate(0)scale(0.5)" />
		</svg>
	</div>


	@foreach (User player in players) // show other players hands:
	{
		if (player.name != winner.name)
		{
			<h4> @player.name had the hand: @handlist[player.bestHand[0]-1]</h4>
			<UserInfo player=@player></UserInfo>
			<div id="userInfo">
				<svg width="300"
					 height="130"
					 xmlns="http://www.w3.org/2000/svg"
					 xmlns:xlink="http://www.w3.org/1999/xlink">
					<use href="@player.hand[0].getName()" x="0" y="0"
						 transform="rotate(0)scale(0.5)" />
					<use href="@player.hand[1].getName()" x="100" y="0"
						 transform="rotate(0)scale(0.5)" />
				</svg>
			</div>
		}
		
	}

	<button @onclick="reset" class="reset">Play another round</button> // play another round
	<br />

}
<style>
	div.scores {
		width: 20%;
		float: left;
		margin: 5px;
	}
	.option{
		width: 50%;
		float: center;
		margin: 5px;
	}
</style>


@code {
	// setup
	Deck deck;
	List<User> players = new List<User>();
	User activePlayer;
	Card[] table = new Card[5];
	int turn = 0;
	int roundBet = 0;
	int pot = 0;
	UserGameInfo activeComp;
	User roundEndAt; //the round ends when this user gets his turn again
	int betAmount = 0;
	bool roundEnded = false;
	User winner;
	/*  Hand list: (score - 1)
		1 is High Card, 2 is Pair, 3 is Two Pair, 4 is Three of a kind,
		5 is Straight, 6 is Flush, 7 is Full House, 8 is Four of a Kind, 
		9 is Straight Flush, 10 is Royal Flush,
	*/
	string[] handlist = { "High Card", "Pair", "Two Pair", "Three of a kind", "Straight", "Flush", "Full House", "Four of a kind", "Straight flush", "Royal Flush"};

	public void check()
	{
		if (activePlayer.currentBet != roundBet && activePlayer.currentBalance != 0) // if player has not bettet enough money and is not all in
		{
			int diff;
			if (activePlayer.currentBalance < (roundBet - activePlayer.currentBet)) // all in
			{
				diff = activePlayer.currentBalance;
			}
			else // normal
			{
				diff = roundBet - activePlayer.currentBet; // if the current player have already raised, take the difference

			}
			activePlayer.bet(diff);
			pot += diff;
			activePlayer.currentBet = roundBet;
		}
		betAmount = 0; // hvis nu man skriver noget ind i raise, også trykker check
		changeActive();
	}

	public void newTurn() 
	{
		if (turn < 4) // If the game has not ended
		{
			turn++; // next turn
			roundBet = 0;
			if (turn == 1) 
			{
				roundBet = 10;
			}
			betAmount = 0;
			roundEndAt = activePlayer; // round end at the current player
			foreach (User player in players)
			{
				player.currentBet = 0;
			}
		
		}
		else
		{
			winner = players[0]; // default winner cannot be blank
			foreach (User player in players)
			{
				int[] score = FindHand(player); // find the poker hand from cards
				player.bestHand = score;
				if (winner.bestHand[0] < score[0])
				{
					winner = player;
				}
				else if (winner.bestHand[0] == score[0])
				{
					winner = winner.bestHand[1] > score[1] ? winner : player;
				}
			}
			winner.currentBalance += pot;
			roundEnded = true;
		}
	}

	public void fold() 
	{
		bool roundEnd = false;
		if (activePlayer.name == roundEndAt.name)
		{
			roundEnd = true;
		}
		players.Remove(activePlayer); // removes the player from the list
		changeActive();
		if (roundEnd)
		{
			roundEndAt = activePlayer;
		}

	}

	public void raise()
	{
		// checks if raising with more than 0 and the player has enough cash
		if (betAmount > 0 && activePlayer.currentBalance >= (betAmount + roundBet)){ 
			roundBet += betAmount;
			int diff = roundBet - activePlayer.currentBet;
			activePlayer.bet(diff); // bets the amount raised with
			pot += diff;
			activePlayer.currentBet = roundBet;
			betAmount = 0;
			roundEndAt = activePlayer;
			betAmount = 0; // hvis nu man skriver noget ind i raise, også trykker fold eller check
			changeActive();
		}
	}

	public void changeActive()
	{
		if (activePlayer is not null)
		{
			activePlayer.active = false;
		}

		players[players.Count - 1].active = true;
		User[] turnOrderChange = new User[players.Count];

		for (int i = 0; i < players.Count; i++) // shuffle list, effectively making the current last index the first
		{
			turnOrderChange[(i + 1) % players.Count] = players[i];
		}
		players = turnOrderChange.ToList<User>();

		activePlayer = players[0];

		activePlayer.active = true;
		if (activeComp.showCards) // prevents cards from showing when going to next player
		{
			activeComp.show();
		}
		if (activePlayer.name == roundEndAt.name)
		{
			newTurn();
		}
	}

	public void reset() //resets and prepare for a new round
	{
		Console.WriteLine("Resetting");
		Shared.GlobalInfo.rounds++; // next round
									// starter values to default:
		deck = new Deck();
		players = new List<User>();
		turn = 0;
		winner = null;
		roundBet = 0;
		pot = 0;
		betAmount = 0;
		roundEndAt = null;
		activePlayer = null;
		roundEnded = false;

		// game startup logic:
		for (int i = 0; i < 5; i++)
		{
			table[i] = deck.draw();
		}

		for (int i = 0; i < Shared.GlobalInfo.userList.Count; i++)
		{
			int id = (Shared.GlobalInfo.rounds + i) % Shared.GlobalInfo.userList.Count; // former 2nd player starts round, former 1st ends round
			players.Add(Shared.GlobalInfo.userList[id]);
		}

		foreach (User player in players)
		{
			player.currentBet = 0;
			player.active = false;
			player.hand[0] = deck.draw();
			player.hand[1] = deck.draw();
		}
		players[0].active = true;
		activePlayer = players[0];
		
		newTurn();
	}

	protected override async Task OnInitializedAsync()
	{
		deck = new Deck();

		for (int i = 0; i < 5; i++)
		{
			table[i] = deck.draw();
		}

		for (int i = 0; i < Shared.GlobalInfo.userList.Count; i++){
			int id = (Shared.GlobalInfo.rounds + i) % Shared.GlobalInfo.userList.Count;
			players.Add(Shared.GlobalInfo.userList[id]);
		}

		foreach (User player in players)
		{
			player.hand[0] = deck.draw();
			player.hand[1] = deck.draw();
		}
		players[0].active = true;
		activePlayer = players[0];
		newTurn();
	}
	private int CardValue(int value)
	{
		if (value == 1)
		{
			return 14;
		} else
		{
			return value;
		}
	}
	private int[] FindHand(User player)
	{
		int[] playerVals = new int[2]; /*[0] is type of hand, 1 is High Card, 2 is Pair, 3 is Two Pair, 4 is Three of a kind, 
		5 is Straight, 6 is Flush, 7 is Full House, 8 is Four of a Kind, 9 is Straight Flush, 10 is Royal Flush,
		[1] is value of highest card*/
		int[] values = new int[7];
		string[] suits = new string[7];
		for (int n = 0; n < 7; n++)
		{
			if (n < 2)
			{
				values[n] = player.hand[n].value;
				suits[n] = player.hand[n].suit;
			} else
			{
				values[n] = table[n - 2].value;
				suits[n] = table[n - 2].suit;
			}
		}
		//High card
		playerVals[0] = 1;
		playerVals[1] = values.Max();
		//Pair, Two Pair, Three of a Kind, Full House, Four of a Kind
		var query = values.GroupBy(x => x, (value, all) => new
		{
			Key = value,
			Count = all.Count(),
		});
		foreach (var result in query)
		{
			if (result.Count == 2)
			{
				//Check for Two Pair
				if (playerVals[0] == 2)
				{
					playerVals[0] = 3;
					if (playerVals[0] < CardValue(result.Key))
					{
						playerVals[1] = CardValue(result.Key);
					}
				} //Check for Full House (Three of a Kind with Pair found)
				else if (playerVals[0] == 4)
				{
					playerVals[0] = 7;
				} else
				{
					playerVals[0] = 2;
					playerVals[1] = CardValue(result.Key);
				}
			} //Check for Three of a Kind
			else if (result.Count == 3)
			{
				//Check for Full House (Pair with Three of a kind found)
				if (playerVals[0] == 2)
				{
					playerVals[0] = 7;
					playerVals[1] = CardValue(result.Key);
				} else
				{
					playerVals[0] = 4;
					playerVals[1] = CardValue(result.Key);
				}
			} //Check for Four of a Kind
			else if (result.Count == 4)
			{
				playerVals[0] = 8;
				playerVals[1] = CardValue(result.Key);
			}
		}
		//Check for Flush
		if (suits.Distinct().Count() == 1)
		{
			playerVals[0] = 6;
			playerVals[1] = values.Max();
		}
		//Straight, Straight Flush, Royal Flush
		int[] sortedValues = values.OrderByDescending(x => x).ToArray();
		int straightCount = 0;
		for (int n = 1; n < 7; n++)
		{
			if (sortedValues[n - 1] - 1 == sortedValues[n])
			{
				straightCount++;
				//Check for Straight
				if (straightCount == 4)
				{
					//Check for Straight Flush
					if (playerVals[0] == 6)
					{
						//Check for Royal Flush
						if (CardValue(sortedValues[n - 4]) == 14)
						{
							playerVals[0] = 10;
						} else
						{
							playerVals[0] = 9;
							playerVals[1] = CardValue(sortedValues[n - 4]);
						}
					} else
					{
						playerVals[0] = 5;
						playerVals[1] = CardValue(sortedValues[n - 4]);
					}
				}
			} else
			{
				straightCount = 0;
			}
		}
		return playerVals;
	}
}
